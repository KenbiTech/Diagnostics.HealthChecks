name: HealthChecks UI CD

on:

  workflow_dispatch:
    inputs:
      nuget-store:
        description : "AWS Code Artifact Store"
      aws-role:
        description: "AWS role that authenticates to CodeArtifact"
        required: true
      aws-region:
        description: "AWS region for environment"
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  build:
    env:
      BUILD_CONFIG: Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.0.x
            7.0.x
            8.0.x

      - name: Authenticate to AWS Code Artifact
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ inputs.aws-region }}
          role-to-assume: ${{ inputs.aws-role }}
          unset-current-credentials: true

          # We need a few steps in order to keep the authorization token secret in the logs and add it as an environment variable
      - name: Configure AWS Code Artifact source for dotnet
        id: get-token
        run: |
          TOKEN_RESPONSE=$(aws codeartifact get-authorization-token --domain kenbi-artifacts)
          AUTH_TOKEN=$(jq --join-output '.authorizationToken' <<< "$TOKEN_RESPONSE")
          echo "token=$AUTH_TOKEN" >> "$GITHUB_OUTPUT"

          if [ -e ./nuget.config ]
          then
              dotnet nuget update source aws/kenbi -u aws -p $AUTH_TOKEN --store-password-in-clear-text --configfile ./nuget.config
          else
              echo "No nuget.config file found!"
          fi
        shell: bash

      - name: Restore UI
        run: dotnet restore ./src/HealthChecks.UI/HealthChecks.UI.csproj
      - name: Restore UI.Client
        run: dotnet restore ./src/HealthChecks.UI.Client/HealthChecks.UI.Client.csproj
      - name: Restore UI.Core
        run: dotnet restore ./src/HealthChecks.UI.Core/HealthChecks.UI.Core.csproj
      - name: Restore UI.Data
        run: dotnet restore ./src/HealthChecks.UI.Data/HealthChecks.UI.Data.csproj
      - name: Restore UI.InMemory.Storage
        run: dotnet restore ./src/HealthChecks.UI.InMemory.Storage/HealthChecks.UI.InMemory.Storage.csproj
      - name: Restore UI.MySql.Storage
        run: dotnet restore ./src/HealthChecks.UI.MySql.Storage/HealthChecks.UI.MySql.Storage.csproj
      - name: Restore UI.PostgreSQL.Storage
        run: dotnet restore ./src/HealthChecks.UI.PostgreSQL.Storage/HealthChecks.UI.PostgreSQL.Storage.csproj
      - name: Restore UI.SQLite.Storage
        run: dotnet restore ./src/HealthChecks.UI.SQLite.Storage/HealthChecks.UI.SQLite.Storage.csproj
      - name: Restore UI.SqlServer.Storage
        run: dotnet restore ./src/HealthChecks.UI.SqlServer.Storage/HealthChecks.UI.SqlServer.Storage.csproj
      - name: Restore UI.K8s.Operator
        run: dotnet restore ./src/HealthChecks.UI.K8s.Operator/HealthChecks.UI.K8s.Operator.csproj
      - name: Build UI
        run: dotnet build --no-restore ./src/HealthChecks.UI/HealthChecks.UI.csproj -c $BUILD_CONFIG
      - name: Build UI.Client
        run: dotnet build --no-restore ./src/HealthChecks.UI.Client/HealthChecks.UI.Client.csproj -c $BUILD_CONFIG
      - name: Build UI.Core
        run: dotnet build --no-restore ./src/HealthChecks.UI.Core/HealthChecks.UI.Core.csproj -c $BUILD_CONFIG
      - name: Build UI.Data
        run: dotnet build --no-restore ./src/HealthChecks.UI.Data/HealthChecks.UI.Data.csproj -c $BUILD_CONFIG
      - name: Build UI.InMemory.Storage
        run: dotnet build --no-restore ./src/HealthChecks.UI.InMemory.Storage/HealthChecks.UI.InMemory.Storage.csproj -c $BUILD_CONFIG
      - name: Build UI.MySql.Storage
        run: dotnet build --no-restore ./src/HealthChecks.UI.MySql.Storage/HealthChecks.UI.MySql.Storage.csproj -c $BUILD_CONFIG
      - name: Build UI.PostgreSQL.Storage
        run: dotnet build --no-restore ./src/HealthChecks.UI.PostgreSQL.Storage/HealthChecks.UI.PostgreSQL.Storage.csproj -c $BUILD_CONFIG
      - name: Build UI.SQLite.Storage
        run: dotnet build --no-restore ./src/HealthChecks.UI.SQLite.Storage/HealthChecks.UI.SQLite.Storage.csproj -c $BUILD_CONFIG
      - name: Build UI.SqlServer.Storage
        run: dotnet build --no-restore ./src/HealthChecks.UI.SqlServer.Storage/HealthChecks.UI.SqlServer.Storage.csproj -c $BUILD_CONFIG
      - name: Build UI.K8s.Operator
        run: dotnet build --no-restore ./src/HealthChecks.UI.K8s.Operator/HealthChecks.UI.K8s.Operator.csproj -c $BUILD_CONFIG

      - name: Pack UI
        run: dotnet pack --no-build ./src/HealthChecks.UI/HealthChecks.UI.csproj -c $BUILD_CONFIG -o ./artifacts
      - name: Pack UI.Client
        run: dotnet pack --no-build ./src/HealthChecks.UI.Client/HealthChecks.UI.Client.csproj -c $BUILD_CONFIG -o ./artifacts
      - name: Pack UI.Core
        run: dotnet pack --no-build ./src/HealthChecks.UI.Core/HealthChecks.UI.Core.csproj -c $BUILD_CONFIG -o ./artifacts
      - name: Pack UI.Data
        run: dotnet pack --no-build ./src/HealthChecks.UI.Data/HealthChecks.UI.Data.csproj -c $BUILD_CONFIG -o ./artifacts
      - name: Pack UI.InMemory.Storage
        run: dotnet pack --no-build ./src/HealthChecks.UI.InMemory.Storage/HealthChecks.UI.InMemory.Storage.csproj -c $BUILD_CONFIG -o ./artifacts
      - name: Pack UI.MySql.Storage
        run: dotnet pack --no-build ./src/HealthChecks.UI.MySql.Storage/HealthChecks.UI.MySql.Storage.csproj -c $BUILD_CONFIG -o ./artifacts
      - name: Pack UI.PostgreSQL.Storage
        run: dotnet pack --no-build ./src/HealthChecks.UI.PostgreSQL.Storage/HealthChecks.UI.PostgreSQL.Storage.csproj -c $BUILD_CONFIG -o ./artifacts
      - name: Pack UI.SQLite.Storage
        run: dotnet pack --no-build ./src/HealthChecks.UI.SQLite.Storage/HealthChecks.UI.SQLite.Storage.csproj -c $BUILD_CONFIG -o ./artifacts
      - name: Pack UI.SqlServer.Storage
        run: dotnet pack --no-build ./src/HealthChecks.UI.SqlServer.Storage/HealthChecks.UI.SqlServer.Storage.csproj -c $BUILD_CONFIG -o ./artifacts
      - name: Pack UI.K8s.Operator
        run: dotnet pack --no-build ./src/HealthChecks.UI.K8s.Operator/HealthChecks.UI.K8s.Operator.csproj -c $BUILD_CONFIG -o ./artifacts
      - name: Publish UI Health Check
        run: dotnet nuget push ./artifacts/AspNetCore.HealthChecks.UI.*.nupkg  -s ${{ inputs.nuget-store }} --skip-duplicate
      - name: Publish UI.Client Health Check
        run: dotnet nuget push ./artifacts/AspNetCore.HealthChecks.UI.Client.*.nupkg  -s ${{ inputs.nuget-store }} --skip-duplicate
      - name: Publish UI.Core Health Check
        run: dotnet nuget push ./artifacts/AspNetCore.HealthChecks.UI.Core.*.nupkg  -s ${{ inputs.nuget-store }} --skip-duplicate
      - name: Publish UI.Data Health Check
        run: dotnet nuget push ./artifacts/AspNetCore.HealthChecks.UI.Data.*.nupkg  -s ${{ inputs.nuget-store}} --skip-duplicate
      - name: Publish UI.InMemory.Storage Health Check
        run: dotnet nuget push ./artifacts/AspNetCore.HealthChecks.UI.InMemory.Storage.*.nupkg  -s ${{ inputs.nuget-store }} --skip-duplicate
      - name: Publish UI.MySql.Storage Health Check
        run: dotnet nuget push ./artifacts/AspNetCore.HealthChecks.UI.MySql.Storage.*.nupkg  -s ${{ inputs.nuget-store }} --skip-duplicate
      - name: Publish UI.PostgreSQL.Storage Health Check
        run: dotnet nuget push ./artifacts/AspNetCore.HealthChecks.UI.PostgreSQL.Storage.*.nupkg  -s ${{ inputs.nuget-store }} --skip-duplicate
      - name: Publish UI.SQLite.Storage Health Check
        run: dotnet nuget push ./artifacts/AspNetCore.HealthChecks.UI.SQLite.Storage.*.nupkg  -s ${{ inputs.nuget-store }} --skip-duplicate
      - name: Publish UI.SqlServer.Storage Health Check
        run: dotnet nuget push ./artifacts/AspNetCore.HealthChecks.UI.SqlServer.Storage.*.nupkg -s ${{ inputs.nuget-store }} --skip-duplicate
      - name: Publish UI.K8s.Operator Health Check
        run: dotnet nuget push ./artifacts/AspNetCore.HealthChecks.UI.K8s.Operator.*.nupkg  -s ${{ inputs.nuget-store }} --skip-duplicate
